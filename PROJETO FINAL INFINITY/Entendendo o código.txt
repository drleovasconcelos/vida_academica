1. PALETA DE CORES CSS
https://mybrandnewlogo.com/pt/gerador-de-paleta-de-cores

2. ENTENDER O PROJETO
INDUSTRIAS WAYNE

2.1 - GERENCIAMENTO DE SEGURANÇA
CONTROLE DE ACESSO - PERMIÇÃO APENAS DE PESSOAS AUTORIZADAS AO ACESSO EM ÁREAS RESTRITAS
IMPLANTAR AUTENTICAÇÃO E AUTORIZAÇÃO PARA DIFERENTES TIPOS DE USUÁRIOS (FUNCIONÁRIOS, GERENTES E ADMINISTRADORES)

1. Planejamento e Estruturação do Projeto
  Defina as Páginas Necessárias:
    Página de Login (com autenticação)
    Página de Cadastro de Usuários (diferenciando funcionários, gerentes e administradores)
    Dashboard Principal (exibe informações de segurança e recursos)
    Página de Gestão de Recursos (criar, atualizar e remover recursos)
    Página de Gerenciamento de Segurança (controle de acesso)
2. Criação do Banco de Dados MySQL
  Estrutura Básica:
  Tabela usuarios: com campos para id, nome, email, senha, tipo_usuario.
  Tabela recursos: com campos para id, nome, descricao, quantidade, tipo_recurso.
  Tabela acessos: para registrar tentativas de acesso com campos para id_usuario, data_hora, area_restrita.
3. Desenvolvimento do Backend (Node.js/Express)
  Autenticação e Autorização:
  Crie rotas para login e logout.
  Implemente middleware de verificação de sessão e permissões com base no tipo_usuario.
  Gestão de Recursos:
  Rotas CRUD para recursos (Create, Read, Update, Delete).
  Controle de Acesso:
  Rotas para registrar e consultar acessos a áreas restritas.
4. Frontend (HTML, CSS, JavaScript)
  Login e Autenticação:
  Crie um formulário de login com JavaScript para enviar dados ao backend.
  Dashboard:
  Utilize gráficos e tabelas (bibliotecas como Chart.js) para exibir dados do banco.
  Gestão de Recursos:
  Formulários para cadastro e edição de recursos.
  Design Responsivo:
  Use CSS e frameworks como Bootstrap para criar uma interface amigável.
5. Integração do Frontend com o Backend
  Use fetch ou axios para realizar chamadas ao backend e atualizar o frontend de acordo com as respostas do servidor.
6. Testes e Ajustes Finais
  Teste cada funcionalidade com diferentes tipos de usuários.
  Corrija possíveis erros e adicione melhorias com base no feedback.
  Se precisar de código ou ajuda com qualquer uma dessas etapas, é só avisar!


---------------------

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Indústrias Wayne - Sistema de Gerenciamento</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-100">
    <header class="bg-gray-800 text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">Indústrias Wayne</h1>
            <nav>
                <ul class="flex space-x-4">
                    <li><a href="#" id="loginLink" class="hover:text-gray-300">Login</a></li>
                    <li><a href="#" id="dashboardLink" class="hover:text-gray-300 hidden">Dashboard</a></li>
                    <li><a href="#" id="resourcesLink" class="hover:text-gray-300 hidden">Recursos</a></li>
                    <li><a href="#" id="securityLink" class="hover:text-gray-300 hidden">Segurança</a></li>
                    <li><a href="#" id="logoutLink" class="hover:text-gray-300 hidden">Logout</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container mx-auto mt-8">
        <div id="loginForm">
            <h2 class="text-2xl font-bold mb-4">Login</h2>
            <form id="loginFormElement" class="space-y-4">
                <input type="text" id="username" placeholder="Nome de usuário" required class="w-full p-2 border rounded">
                <input type="password" id="password" placeholder="Senha" required class="w-full p-2 border rounded">
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Entrar</button>
            </form>
        </div>

        <div id="dashboard" class="hidden">
            <h2 class="text-2xl font-bold mb-4">Dashboard</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold mb-2">Total de Recursos</h3>
                    <p id="totalResources" class="text-3xl font-bold">150</p>
                </div>
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold mb-2">Recursos com Baixo Estoque</h3>
                    <ul id="lowStockResources" class="list-disc pl-5">
                        <li>Batarangues - 5 unidades</li>
                        <li>Capa - 2 unidades</li>
                        <li>Batmóvel - 1 unidade</li>
                    </ul>
                </div>
                <div class="bg-white p-4 rounded shadow col-span-2">
                    <h3 class="text-lg font-semibold mb-2">Acessos Recentes</h3>
                    <ul id="recentAccesses" class="space-y-2">
                        <li>Alfred Pennyworth - Batcaverna - 10:30</li>
                        <li>Lucius Fox - Laboratório - 09:45</li>
                        <li>Bruce Wayne - Sala de Reuniões - 08:15</li>
                    </ul>
                </div>
                <div class="bg-white p-4 rounded shadow col-span-2">
                    <h3 class="text-lg font-semibold mb-2">Distribuição de Recursos</h3>
                    <canvas id="resourceDistributionChart"></canvas>
                </div>
            </div>
        </div>

        <div id="resources" class="hidden">
            <h2 class="text-2xl font-bold mb-4">Gerenciamento de Recursos</h2>
            <form id="resourceForm" class="space-y-4 mb-8">
                <input type="text" id="resourceName" placeholder="Nome do recurso" required class="w-full p-2 border rounded">
                <input type="text" id="resourceType" placeholder="Tipo do recurso" required class="w-full p-2 border rounded">
                <input type="number" id="resourceQuantity" placeholder="Quantidade" required class="w-full p-2 border rounded">
                <button type="submit" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Adicionar Recurso</button>
            </form>
            <div id="resourceList" class="space-y-4">
                <!-- Recursos serão adicionados aqui dinamicamente -->
            </div>
        </div>

        <div id="security" class="hidden">
            <h2 class="text-2xl font-bold mb-4">Controle de Segurança</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold mb-2">Áreas Restritas</h3>
                    <ul id="restrictedAreas" class="list-disc pl-5">
                        <li>Batcaverna</li>
                        <li>Laboratório Secreto</li>
                        <li>Arsenal</li>
                    </ul>
                </div>
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold mb-2">Gerenciar Acesso</h3>
                    <form id="accessForm" class="space-y-4">
                        <select id="userSelect" class="w-full p-2 border rounded">
                            <option value="">Selecione um usuário</option>
                            <option value="1">Bruce Wayne</option>
                            <option value="2">Alfred Pennyworth</option>
                            <option value="3">Lucius Fox</option>
                        </select>
                        <select id="areaSelect" class="w-full p-2 border rounded">
                            <option value="">Selecione uma área</option>
                            <option value="1">Batcaverna</option>
                            <option value="2">Laboratório Secreto</option>
                            <option value="3">Arsenal</option>
                        </select>
                        <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Conceder Acesso</button>
                    </form>
                </div>
            </div>
        </div>
    </main>

    <script>
        // Simulated user roles and authentication
        const users = {
            'bruce': { password: 'wayne', role: 'admin' },
            'alfred': { password: 'pennyworth', role: 'manager' },
            'lucius': { password: 'fox', role: 'employee' }
        };

        let currentUser = null;

        // DOM elements
        const loginForm = document.getElementById('loginForm');
        const dashboard = document.getElementById('dashboard');
        const resources = document.getElementById('resources');
        const security = document.getElementById('security');
        const loginLink = document.getElementById('loginLink');
        const dashboardLink = document.getElementById('dashboardLink');
        const resourcesLink = document.getElementById('resourcesLink');
        const securityLink = document.getElementById('securityLink');
        const logoutLink = document.getElementById('logoutLink');

        // Event listeners
        document.getElementById('loginFormElement').addEventListener('submit', handleLogin);
        loginLink.addEventListener('click', showLoginForm);
        dashboardLink.addEventListener('click', showDashboard);
        resourcesLink.addEventListener('click', showResources);
        securityLink.addEventListener('click', showSecurity);
        logoutLink.addEventListener('click', handleLogout);
        document.getElementById('resourceForm').addEventListener('submit', handleAddResource);
        document.getElementById('accessForm').addEventListener('submit', handleGrantAccess);

        // Functions
        function handleLogin(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (users[username] && users[username].password === password) {
                currentUser = { username, role: users[username].role };
                updateNavigation();
                showDashboard();
            } else {
                alert('Credenciais inválidas. Tente novamente.');
            }
        }

        function updateNavigation() {
            loginLink.classList.add('hidden');
            dashboardLink.classList.remove('hidden');
            resourcesLink.classList.remove('hidden');
            logoutLink.classList.remove('hidden');

            if (currentUser.role === 'admin' || currentUser.role === 'manager') {
                securityLink.classList.remove('hidden');
            } else {
                securityLink.classList.add('hidden');
            }
        }

        function showLoginForm() {
            hideAllSections();
            loginForm.classList.remove('hidden');
        }

        function showDashboard() {
            hideAllSections();
            dashboard.classList.remove('hidden');
            updateDashboard();
        }

        function showResources() {
            hideAllSections();
            resources.classList.remove('hidden');
            updateResourceList();
        }

        function showSecurity() {
            if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {
                alert('Acesso não autorizado.');
                return;
            }
            hideAllSections();
            security.classList.remove('hidden');
        }

        function handleLogout() {
            currentUser = null;
            hideAllSections();
            loginForm.classList.remove('hidden');
            loginLink.classList.remove('hidden');
            dashboardLink.classList.add('hidden');
            resourcesLink.classList.add('hidden');
            securityLink.classList.add('hidden');
            logoutLink.classList.add('hidden');
        }

        function hideAllSections() {
            loginForm.classList.add('hidden');
            dashboard.classList.add('hidden');
            resources.classList.add('hidden');
            security.classList.add('hidden');
        }

        function updateDashboard() {
            // Update chart
            const ctx = document.getElementById('resourceDistributionChart').getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Equipamentos', 'Veículos', 'Dispositivos de Segurança'],
                    datasets: [{
                        data: [65, 20, 15],
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                    }]
                }
            });
        }

        function handleAddResource(e) {
            e.preventDefault();
            const name = document.getElementById('resourceName').value;
            const type = document.getElementById('resourceType').value;
            const quantity = document.getElementById('resourceQuantity').value;

            // In a real application, you would send this data to the server
            // For now, we'll just update the list locally
            const resourceItem = document.createElement('div');
            resourceItem.className = 'bg-white p-4 rounded shadow';
            resourceItem.innerHTML = `
                <h3 class="text-lg font-semibold">${name}</h3>
                <p>Tipo: ${type}</p>
                <p>Quantidade: ${quantity}</p>
            `;
            document.getElementById('resourceList').appendChild(resourceItem);

            // Clear form
            e.target.reset();
        }

        function updateResourceList() {
            // In a real application, you would fetch this data from the server
            const resourceList = document.getElementById('resourceList');
            resourceList.innerHTML = `
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold">Batarangues</h3>
                    <p>Tipo: Equipamento</p>
                    <p>Quantidade: 50</p>
                </div>
                <div class="bg-white p-4 rounded shadow">
                    <h3 class="text-lg font-semibold">Batmóvel</h3>
                    <p>Tipo: Veículo</p>
                    <p>Quantidade: 1</p>
                </div>
            `;
        }

        function handleGrantAccess(e) {
            e.preventDefault();
            const user = document.getElementById('userSelect').value;
            const area = document.getElementById('areaSelect').value;

            if (user && area) {
                alert(`Acesso concedido para o usuário ID ${user} à área ID ${area}`);
                e.target.reset();
            } else {
                alert('Por favor, selecione um usuário e uma área.');
            }
        }

        // Initialize the application
        showLoginForm();
    </script>
</body>
</html>
--------------backend
# main.py
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
from pydantic import BaseModel
from datetime import datetime, timedelta
from typing import List, Optional
import jwt
from passlib.context import CryptContext

# Configuração do FastAPI
app = FastAPI(title="Indústrias Wayne - Sistema de Gerenciamento")

# Configuração do banco de dados
SQLALCHEMY_DATABASE_URL = "mysql://user:password@localhost/wayne_industries"
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Configuração de segurança
SECRET_KEY = "sua_chave_secreta_muito_segura"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Modelos do banco de dados
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True)
    hashed_password = Column(String(100))
    role = Column(String(20))
    is_active = Column(Boolean, default=True)

class Resource(Base):
    __tablename__ = "resources"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100))
    type = Column(String(50))
    quantity = Column(Integer)
    last_updated = Column(DateTime, default=datetime.utcnow)

class Area(Base):
    __tablename__ = "areas"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True)

class AccessLog(Base):
    __tablename__ = "access_logs"
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    area_id = Column(Integer, ForeignKey("areas.id"))
    timestamp = Column(DateTime, default=datetime.utcnow)
    user = relationship("User")
    area = relationship("Area")

# Criar as tabelas
Base.metadata.create_all(bind=engine)

# Modelos Pydantic para validação de dados
class UserCreate(BaseModel):
    username: str
    password: str
    role: str

class UserOut(BaseModel):
    id: int
    username: str
    role: str
    is_active: bool

class ResourceCreate(BaseModel):
    name: str
    type: str
    quantity: int

class ResourceOut(BaseModel):
    id: int
    name: str
    type: str
    quantity: int
    last_updated: datetime

class AreaCreate(BaseModel):
    name: str

class AreaOut(BaseModel):
    id: int
    name: str

class AccessLogCreate(BaseModel):
    user_id: int
    area_id: int

class AccessLogOut(BaseModel):
    id: int
    user_id: int
    area_id: int
    timestamp: datetime

# Funções auxiliares
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: Session, username: str, password: str):
    user = db.query(User).filter(User.username == username).first()
    if not user or not verify_password(password, user.hashed_password):
        return False
    return user

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
    except jwt.PyJWTError:
        raise credentials_exception
    user = db.query(User).filter(User.username == username).first()
    if user is None:
        raise credentials_exception
    return user

# Rotas da API
@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/users/", response_model=UserOut)
async def create_user(user: UserCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Not authorized to create users")
    db_user = User(username=user.username, hashed_password=get_password_hash(user.password), role=user.role)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

@app.get("/users/me", response_model=UserOut)
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user

@app.post("/resources/", response_model=ResourceOut)
async def create_resource(resource: ResourceCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="Not authorized to create resources")
    db_resource = Resource(**resource.dict())
    db.add(db_resource)
    db.commit()
    db.refresh(db_resource)
    return db_resource

@app.get("/resources/", response_model=List[ResourceOut])
async def get_resources(skip: int = 0, limit: int = 100, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    resources = db.query(Resource).offset(skip).limit(limit).all()
    return resources

@app.put("/resources/{resource_id}", response_model=ResourceOut)
async def update_resource(resource_id: int, resource: ResourceCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="Not authorized to update resources")
    db_resource = db.query(Resource).filter(Resource.id == resource_id).first()
    if db_resource is None:
        raise HTTPException(status_code=404, detail="Resource not found")
    for key, value in resource.dict().items():
        setattr(db_resource, key, value)
    db_resource.last_updated = datetime.utcnow()
    db.commit()
    db.refresh(db_resource)
    return db_resource

@app.delete("/resources/{resource_id}")
async def delete_resource(resource_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Not authorized to delete resources")
    db_resource = db.query(Resource).filter(Resource.id == resource_id).first()
    if db_resource is None:
        raise HTTPException(status_code=404, detail="Resource not found")
    db.delete(db_resource)
    db.commit()
    return {"message": "Resource deleted successfully"}

@app.post("/areas/", response_model=AreaOut)
async def create_area(area: AreaCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Not authorized to create areas")
    db_area = Area(**area.dict())
    db.add(db_area)
    db.commit()
    db.refresh(db_area)
    return db_area

@app.get("/areas/", response_model=List[AreaOut])
async def get_areas(skip: int = 0, limit: int = 100, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    areas = db.query(Area).offset(skip).limit(limit).all()
    return areas

@app.post("/access-logs/", response_model=AccessLogOut)
async def create_access_log(access_log: AccessLogCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    db_access_log = AccessLog(**access_log.dict())
    db.add(db_access_log)
    db.commit()
    db.refresh(db_access_log)
    return db_access_log

@app.get("/access-logs/", response_model=List[AccessLogOut])
async def get_access_logs(skip: int = 0, limit: int = 100, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="Not authorized to view access logs")
    access_logs = db.query(AccessLog).offset(skip).limit(limit).all()
    return access_logs

@app.get("/dashboard/")
async def get_dashboard_data(db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    total_resources = db.query(Resource).count()
    low_stock_resources = db.query(Resource).filter(Resource.quantity < 10).all()
    recent_accesses = db.query(AccessLog).order_by(AccessLog.timestamp.desc()).limit(5).all()
    resource_distribution = db.query(Resource.type, func.sum(Resource.quantity)).group_by(Resource.type).all()

    return {
        "total_resources": total_resources,
        "low_stock_resources": [{"name": r.name, "quantity": r.quantity} for r in low_stock_resources],
        "recent_accesses": [{"user": a.user.username, "area": a.area.name, "timestamp": a.timestamp} for a in recent_accesses],
        "resource_distribution": dict(resource_distribution)
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

